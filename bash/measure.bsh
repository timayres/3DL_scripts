#!/bin/bash
 #measure.bsh
# license: LGPLv2.1
# functions to perform measurements on meshes
# filters are based on MeshLab v 1.3.4BETA for 64 bit Windows

# Usage: measure_AABB IF
measure_AABB() {
    # Measure AABB by sorting XYZ point cloud
    
    declare -gA AABB # associative array, global
    
    case "${1##*.}" in # check file extension of input
        [Xx][Yy][Zz] )
            measure_size_file="$1"
            ;;
        * )
            echo ; echo "Measuring mesh size: "
            ml_IF="$1"
            ml_OF="TEMP3DL_ml_output.xyz"
            ml_SF="" #This shouldn't be needed
            run_meshlab
            return_code=$?
            measure_size_file="$ml_OF"
            ;;
    esac
    
    # while read arg value; do
        # AABB[$arg]=$value
    # done < "AABB_text.txt"
    # echo ${!AABB[@]}
    # echo ${AABB[@]}
    
    
    
    # sort "$measure_size_file" by X, find max & min
    sort -n -k 1,1 -o "$measure_size_file" "$measure_size_file"
    AABB[minX]=$(head -1 "$measure_size_file" | cut -d" " -f1)
    AABB[maxX]=$(tail -1 "$measure_size_file" | cut -d" " -f1)
    xmin=${AABB[minX]}
    xmax=${AABB[maxX]}
    
    # sort "$measure_size_file" by Y, find max & min
    sort -n -k 2,2 -o "$measure_size_file" "$measure_size_file"
    AABB[minY]=$(head -1 "$measure_size_file" | cut -d" " -f2)
    AABB[maxY]=$(tail -1 "$measure_size_file" | cut -d" " -f2)
    ymin=${AABB[minY]}
    ymax=${AABB[maxY]}
    
    # sort "$measure_size_file" by Z, find max & min
    sort -n -k 3,3 -o "$measure_size_file" "$measure_size_file"
    AABB[minZ]=$(head -1 "$measure_size_file" | cut -d" " -f3)
    AABB[maxZ]=$(tail -1 "$measure_size_file" | cut -d" " -f3)
    zmin=${AABB[minZ]}
    zmax=${AABB[maxZ]}
    
    AABB[centerX]=$(bc <<< "scale=10;(${AABB[maxX]} + ${AABB[minX]})/2") # x average
    AABB[centerY]=$(bc <<< "scale=10;(${AABB[maxY]} + ${AABB[minY]})/2") # y average
    AABB[centerZ]=$(bc <<< "scale=10;(${AABB[maxZ]} + ${AABB[minZ]})/2") # z average
    xcenter=${AABB[centerX]}
    ycenter=${AABB[centerY]}
    zcenter=${AABB[centerZ]}
    
    AABB[sizeX]=$(bc <<< "(${AABB[maxX]} - ${AABB[minX]})")
    AABB[sizeY]=$(bc <<< "(${AABB[maxY]} - ${AABB[minY]})")
    AABB[sizeZ]=$(bc <<< "(${AABB[maxZ]} - ${AABB[minZ]})")
    xsize=${AABB[sizeX]}
    ysize=${AABB[sizeY]}
    zsize=${AABB[sizeZ]}
    AABB[diag]=$(bc <<< "scale=10;sqrt(${AABB[sizeX]}^2+${AABB[sizeY]}^2+${AABB[sizeZ]}^2)")
    BBdiag=${AABB[diag]}
    
    if [ "$verbosity" -ge 2 ]; then
        echo
        echo "Axis Aligned Bounding Box Size:"
        echo "  Min X = ${AABB[minX]}  Max X = ${AABB[maxX]}  X Size = ${AABB[sizeX]} mm"
        echo "  Min Y = ${AABB[minY]}  Max Y = ${AABB[maxY]}  Y Size = ${AABB[sizeY]} mm"
        echo "  Min Z = ${AABB[minZ]}  Max Z = ${AABB[maxZ]}  Z Size = ${AABB[sizeZ]} mm"
        echo "  Bounding Box Diagonal = ${AABB[diag]} mm"
    fi
    return 0
}

# Usage: measure_geometry IF
# also runs measure_AABB
measure_geometry() {
    #MeshLab has trouble measuring the bounding box of a hollow bust; reports all sizes as -2. Volume was measured fine. TODO: Report bug.
    
    echo ; echo "Measuring mesh geometry ... "
    ml_IF="$1"
    ml_OF="TEMP3DL_ml_output.xyz"
    ml_LF="TEMP3DL_ML_log_measure_geometry.txt"
    ml_SF="TEMP3DL_measure_geometry.mlx"
    
    mlx_begin
    mlx_measure_geometry
    mlx_end
    run_meshlab
    return_code=$?
    
    measure_AABB "$ml_OF"
    parse_geometry_log "$ml_LF"
    
    ml_LF=""
    return $return_code
}

# Usage: measure_all IF
# measures size, geometry & topology
measure_all() {

    echo ; echo "Measuring mesh ... "
    ml_IF="$1"
    ml_OF="TEMP3DL_ml_output.xyz"
    ml_LF="TEMP3DL_ML_log_measure_all.txt"
    ml_SF="TEMP3DL_measure_all.mlx"
    
    mlx_begin
    mlx_measure_geometry
    mlx_measure_topology
    mlx_end
    run_meshlab
    return_code=$?
    
    measure_AABB "$ml_OF"
    parse_geometry_log "$ml_LF"
    parse_topology_log "$ml_LF"
        
    ml_LF=""
    return $return_code
}

# Usage: measure_dimension IF (X=0)|Y=|Z= X=|(Y=0)|Z=
measure_dimension() {
    local i
    local first
    local axis1
    local axis2
    local offset1
    local offset2
    
    # Defaults
    first="true"
    axis1="x"
    axis2="y"
    offset1=0
    offset2=0
    
    echo ; echo "  Measuring dimension ... "
    for i in "$@"; do
        case $i in
            [xX]=*)
                if [ "$first" = "true" ]; then
                    axis1="x"
                    offset1="${i#*=}"
                    first="false"
                else
                    axis2="x"
                    offset2="${i#*=}"
                fi
                shift # past argument=value
                ;;
            [yY]=*)
                if [ "$first" = "true" ]; then
                    axis1="y"
                    offset1="${i#*=}"
                    first="false"
                else
                    axis2="y"
                    offset2="${i#*=}"
                fi
                shift # past argument=value
                ;;
            [zZ]=*)
                if [ "$first" = "true" ]; then
                    axis1="z"
                    offset1="${i#*=}"
                    first="false"
                else
                    axis2="z"
                    offset2="${i#*=}"
                fi
                shift # past argument=value
                ;;
            *)
                if [ -r "$i" ]; then
                    ml_IF="$i"
                else
                    echo ; echo "Unknown option"
                fi
                shift
                ;;
        esac
    done
    
    # Do some checking on the validity of the input
    if [ ! -r "$ml_IF" ]; then
        pause "$ml_IF doesn't seem to be a valid input file, hit any key to exit ..."
        exit 1
    fi
    
    isnumber "$offset1"
    if [ $? -ne 0 ]; then
        pause "$offset1 doesn't seem to be a valid number, hit any key to exit ..."
        exit 1
    fi
    
    isnumber "$offset2"
    if [ $? -ne 0 ]; then
        pause "$offset2 doesn't seem to be a valid number, hit any key to exit ..."
        exit 1
    fi
    
    if [ "$axis1" = "$axis2" ]; then
        pause "Axis 1 and axis 2 cannot be the same, hit any key to exit ..."
        exit 1
    fi
    # done checking input validity
    
    ml_OF="TEMP3DL_${fpref}_dimension${meta}.xyz"
    ml_LF="" #"TEMP3DL_ML_log_measure_dim.txt"
    ml_SF="TEMP3DL_measure_dim.mlx"
    
    mlx_begin
    mlx_section "$axis1"="$offset1" surface=true
    mlx_section "$axis2"="$offset2" surface=false
    mlx_end
    run_meshlab
    return_code=$?
    
    # find axis3 and cut out its column
    if [ "$axis1" = "z" ] || [ "$axis2" = "z" ]; then
        if [ "$axis1" = "y" ] || [ "$axis2" = "y" ]; then
            axis3="x"
            do_measure_dimesnion_OF="${ml_OF%.*}.${axis3}"
            awk '{print $1}' "$ml_OF" > "$do_measure_dimesnion_OF"
        else
            axis3="y"
            do_measure_dimesnion_OF="${ml_OF%.*}.${axis3}"
            awk '{print $2}' "$ml_OF" > "$do_measure_dimesnion_OF"
        fi
    else
        axis3="z"
        do_measure_dimesnion_OF="${ml_OF%.*}.${axis3}"
        awk '{print $3}' "$ml_OF" > "$do_measure_dimesnion_OF"
    fi
    
    # sort "$do_measure_dimesnion_OF", find max & min
    sort -n -o "$do_measure_dimesnion_OF" "$do_measure_dimesnion_OF"
    axismin=$(head -1 "$do_measure_dimesnion_OF")
    axismax=$(tail -1 "$do_measure_dimesnion_OF")
    axissize=$(bc <<< "($axismax - $axismin)")
    
    if [ "$verbosity" -ge 2 ]; then
        echo
        echo "Dimension parallel to $axis3 with $axis1=$offset1 & $axis2=$offset2:"
        echo "  Min = ""$axismin""  Max = ""$axismax""  Total length = ""$axissize"" mm"
    fi
    
    ml_LF=""
    return $return_code
}

# Usgae: pass outline (output of mlx_section) in obj format, this will sort polylines and load into arrays
polylinesort() {
    ${scriptpath}/../c/polylinesort.exe $1 # will generate polyline_1.xyz, etc.
    
    declare -a polyline
    declare -a polylinelength
    i=0
    #set -x
    for a in polyline*.xyz; do
        #echo a=$a
        j=0
        while read x y z; do
            #polyline1[$i]="[$x,$y,$z]" # for openscad
            echo i=$i j=$j 
            if [ $j -eq 0 ]; then
                #polyline[$i]="[$x,$y]" # for openscad polygon test omit z
                polyline[$i]="[$x,$y,$z]"
                polylinelength[$i]=0
                polyline_xmax[$i]=$x
                polyline_xmin[$i]=$x
                polyline_ymax[$i]=$y
                polyline_ymin[$i]=$y
                polyline_zmax[$i]=$z
                polyline_zmin[$i]=$z
            else
                #polyline[$i]="${polyline[$i]},[$x,$y]" # for openscad polygon test omit z
                polyline[$i]="${polyline[$i]},[$x,$y,$z]"
                
                #bc is much to slow to operate over hundreds of vertices
                #polylinelength[$i]=$(bc <<< "scale=10;(sqrt( ($x - $x0)^2+($y - $y0)^2+($z - $z0)^2)+${polylinelength[$i]})") # MUST have space in between subtraction operator to deal with negative numbers
                #echo x=$x
                #echo polyline_xmax=${polyline_xmax[$i]}
                #echo polyline_xmin=${polyline_xmin[$i]}
                
                # if (( $(bc <<< "$x > ${polyline_xmax[$i]}") )); then
                    # polyline_xmax[$i]=$x
                # elif (( $(bc <<< "$x < ${polyline_xmin[$i]}") )); then
                    # polyline_xmin[$i]=$x
                # fi
                # if (( $(bc <<< "$y > ${polyline_ymax[$i]}") )); then
                    # polyline_ymax[$i]=$y
                # elif (( $(bc <<< "$y < ${polyline_ymin[$i]}") )); then
                    # polyline_ymin[$i]=$y
                # fi
                # if (( $(bc <<< "$z > ${polyline_zmax[$i]}") )); then
                    # polyline_zmax[$i]=$z
                # elif (( $(bc <<< "$z < ${polyline_zmin[$i]}") )); then
                    # polyline_zmin[$i]=$z
                # fi
                
            fi
            #echo polyline[$i] = ${polyline[$i]}
            #echo polylinelength[$i] = ${polylinelength[$i]}
            x0=$x
            y0=$y
            z0=$z
            ((j++))
        done < "$a"
        ((i++))
    done
    #echo ; echo ${!polyline[@]}
    #echo ; echo ${polyline[@]}
    #echo ; echo polyline 2,1 ${polyline[2,1]}
    #echo "polyline_xmax=" ${polyline_xmax[@]}
    #echo "polyline_xmin=" ${polyline_xmin[@]}
    
    i=0
    echo "polygon(points=[${polyline[$i]}]); " > polygons.scad
    for ((i=1; i < ${#polyline[@]} ; i++)); do
        echo "polygon(points=[${polyline[$i]}]); " >> polygons.scad
    done
    
    return 0
}
