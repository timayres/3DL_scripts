#!/bin/bash
#measure.bsh
#version=.1
#functions to perform measurements on the mesh
# filters are based on MeshLab v 1.3.4BETA for 64 bit Windows
#License:

# Usage: do_measure_size IF
do_measure_size() {
    # Measure AABB by sorting XYZ point cloud
    
    case "${1##*.}" in # check file extension of input
        [Xx][Yy][Zz] )
            measure_size_file="$1"
            ;;
        * )
            echo ; echo "Measuring mesh size: "
            ml_IF="$1"
            ml_OF="TEMP3DP_ml_output.xyz"
            ml_SF="" #This shouldn't be needed
            run_meshlab
            return_code=$?
            measure_size_file="$ml_OF"
            ;;
    esac
    
    # sort "$measure_size_file" by X, find max & min
    sort -n -k 1,1 -o "$measure_size_file" "$measure_size_file"
    xmin=$(head -1 "$measure_size_file" | cut -d" " -f1)
    xmax=$(tail -1 "$measure_size_file" | cut -d" " -f1)
    
    # sort "$measure_size_file" by Y, find max & min
    sort -n -k 2,2 -o "$measure_size_file" "$measure_size_file"
    ymin=$(head -1 "$measure_size_file" | cut -d" " -f2)
    ymax=$(tail -1 "$measure_size_file" | cut -d" " -f2)
    
    # sort "$measure_size_file" by Z, find max & min
    sort -n -k 3,3 -o "$measure_size_file" "$measure_size_file"
    zmin=$(head -1 "$measure_size_file" | cut -d" " -f3)
    zmax=$(tail -1 "$measure_size_file" | cut -d" " -f3)
    
    xsize=$(bc <<< "($xmax - $xmin)")
    ysize=$(bc <<< "($ymax - $ymin)")
    zsize=$(bc <<< "($zmax - $zmin)")
    BBdiag=$(bc <<< "scale=10;sqrt($xsize^2+$ysize^2+$zsize^2)")

    if [ "$verbosity" -ge 2 ]; then
        echo
        echo "Mesh Axis Aligned Bounding Box Size:"
        echo "  X Min = ""$xmin""  X Max = ""$xmax""  X Size = ""$xsize"" mm"
        echo "  Y Min = ""$ymin""  Y Max = ""$ymax""  Y Size = ""$ysize"" mm"
        echo "  Z Min = ""$zmin""  Z Max = ""$zmax""  Z Size = ""$zsize"" mm"
        echo "  Bounding Box Diagonal = ""$BBdiag"
    fi
    return 0
}

# Usage: do_measure_geometry IF
# also runs do_measure_size
do_measure_geometry() {
    #MeshLab has trouble measuring the bounding box of a hollow bust; reports all sizes as -2. Volume was measured fine. TODO: Report bug.
    
    echo ; echo "Measuring mesh geometry ... "
    ml_IF="$1"
    ml_OF="TEMP3DP_ml_output.xyz"
    ml_LF="TEMP3DP_ML_log_measure_geometry.txt"
    ml_SF="TEMP3DP_measure_geometry.mlx"
    
    mlx_begin
    mlx_measure_geometry
    mlx_end
    run_meshlab
    return_code=$?
    
    do_measure_size "$ml_OF"
    parse_geometry_log "$ml_LF"
    
    ml_LF=""
    return $return_code
}

# Usage: do_measure_all IF
# measures size, geometry & topology
do_measure_all() {

    echo ; echo "Measuring mesh ... "
    ml_IF="$1"
    ml_OF="TEMP3DP_ml_output.xyz"
    ml_LF="TEMP3DP_ML_log_measure_all.txt"
    ml_SF="TEMP3DP_measure_all.mlx"
    
    mlx_begin
    mlx_measure_geometry
    mlx_measure_topology
    mlx_end
    run_meshlab
    return_code=$?
    
    do_measure_size "$ml_OF"
    parse_geometry_log "$ml_LF"
    parse_topology_log "$ml_LF"
        
    ml_LF=""
    return $return_code
}

# Usage: do_measure_dimension IF (X=0)|Y=|Z= X=|(Y=0)|Z=
do_measure_dimension() {
    local i
    local first
    local axis1
    local axis2
    local offset1
    local offset2
    
    # Defaults
    first="true"
    axis1="x"
    axis2="y"
    offset1=0
    offset2=0
    
    #TODO: use same format of x=, y= for this function
    
    echo ; echo "  Measuring dimension ... "
    
    for i in "$@"
    do
    case $i in
        [xX]=*)
            if [ "$first" = "true" ]; then
                axis1="x"
                offset1="${i#*=}"
                first="false"
            else
                axis2="x"
                offset2="${i#*=}"
            fi
            shift # past argument=value
            ;;
        [yY]=*)
            if [ "$first" = "true" ]; then
                axis1="y"
                offset1="${i#*=}"
                first="false"
            else
                axis2="y"
                offset2="${i#*=}"
            fi
            shift # past argument=value
            ;;
        [zZ]=*)
            if [ "$first" = "true" ]; then
                axis1="z"
                offset1="${i#*=}"
                first="false"
            else
                axis2="z"
                offset2="${i#*=}"
            fi
            shift # past argument=value
            ;;
        *)
            if [ -r "$i" ]; then
                ml_IF="$i"
            else
                echo ; echo "Unknown option"
            fi
            shift
            ;;
    esac
    done
    
    # Do some checking on the validity of the input
    if [ ! -r "$ml_IF" ]; then
        pause "$ml_IF doesn't seem to be a valid input file, hit any key to exit ..."
        exit 1
    fi
    
    isnumber "$offset1"
    if [ $? -ne 0 ]; then
        pause "$offset1 doesn't seem to be a valid number, hit any key to exit ..."
        exit 1
    fi
    
    isnumber "$offset2"
    if [ $? -ne 0 ]; then
        pause "$offset2 doesn't seem to be a valid number, hit any key to exit ..."
        exit 1
    fi
    
    if [ "$axis1" = "$axis2" ]; then
        pause "Axis 1 and axis 2 cannot be the same, hit any key to exit ..."
        exit 1
    fi
    # done checking input validity
    
    ml_OF="TEMP3DP_${fpref}_dimension${meta}.xyz"
    ml_LF="" #"TEMP3DP_ML_log_measure_dim.txt"
    ml_SF="TEMP3DP_measure_dim.mlx"
    
    mlx_begin
    mlx_section "$axis1"="$offset1" surface=true
    mlx_section "$axis2"="$offset2" surface=false
    mlx_end
    run_meshlab
    return_code=$?
    
    # find axis3 and cut out its column
    if [ "$axis1" = "z" ] || [ "$axis2" = "z" ]; then
        if [ "$axis1" = "y" ] || [ "$axis2" = "y" ]; then
            axis3="x"
            do_measure_dimesnion_OF="${ml_OF%.*}.${axis3}"
            awk '{print $1}' "$ml_OF" > "$do_measure_dimesnion_OF"
        else
            axis3="y"
            do_measure_dimesnion_OF="${ml_OF%.*}.${axis3}"
            awk '{print $2}' "$ml_OF" > "$do_measure_dimesnion_OF"
        fi
    else
        axis3="z"
        do_measure_dimesnion_OF="${ml_OF%.*}.${axis3}"
        awk '{print $3}' "$ml_OF" > "$do_measure_dimesnion_OF"
    fi
    
    # sort "$do_measure_dimesnion_OF", find max & min
    sort -n -o "$do_measure_dimesnion_OF" "$do_measure_dimesnion_OF"
    axismin=$(head -1 "$do_measure_dimesnion_OF")
    axismax=$(tail -1 "$do_measure_dimesnion_OF")
    axissize=$(bc <<< "($axismax - $axismin)")
    
    if [ "$verbosity" -ge 2 ]; then
        echo
        echo "Dimension parallel to $axis3 with $axis1=$offset1 & $axis2=$offset2:"
        echo "  Min = ""$axismin""  Max = ""$axismax""  Total length = ""$axissize"" mm"
    fi
    
    ml_LF=""
    return $return_code
}
